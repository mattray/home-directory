http://admin:8091/ubuntu_dvd/ami/


euca-run-instances $emi -k mykey -t m1.tiny



mray@lrrr:~$ sudo su - nova
[sudo] password for mray: 
nova@lrrr:~$ nova-manage service list
lrrr       nova-scheduler enabled  :-) 2011-02-25 03:26:08
lrrr       nova-network enabled  :-) 2011-02-25 03:26:11
lrrr       nova-compute enabled  :-) 2011-02-25 03:26:13
nova@lrrr:~$ cd
nova@lrrr:~$ ls
buckets  CA  cacert.pem  cert.pem  images  instances  keys  mykey.priv	networks  novarc  nova.sqlite  nova.zip  pk.pem  setup	tmp
nova@lrrr:~$ euca-describe-image
No command 'euca-describe-image' found, did you mean:
 Command 'euca-describe-images' from package 'euca2ools' (main)
euca-describe-image: command not found
nova@lrrr:~$ euca-describe-images
IMAGE	ami-dovh7phn	nova_amis/maverick-server-uec-amd64.img.manifest.xml	admin	available	private		i386	machine	ami-dpjxt3ra	
IMAGE	ami-dpjxt3ra	nova_amis/maverick-server-uec-amd64-vmlinuz-virtual.manifest.xml	admin	available	private		i386	kernel	true	
nova@lrrr:~$ euca-run-instances ami-dpjxt3ra -k mykey -t m1.tiny
NotFound: Image true could not be found
nova@lrrr:~$ euca-run-instances ami-dovh7phn -k mykey -t m1.tiny
RESERVATION	r-winzhwlj	admin	default
INSTANCE	i-00000001	ami-dovh7phn			scheduling	mykey (admin, None)	0		m1.tiny	2011-02-25 03:31:24	unknown zone		
nova@lrrr:~$ euca-describe-instances 
RESERVATION	r-winzhwlj	admin	default
INSTANCE	i-00000001	ami-dovh7phn			networking	mykey (admin, lrrr)	0		m1.tiny	2011-02-25 03:31:24	nova		

nova@lrrr:~$ euca-describe-instances 
RESERVATION	r-4mj30jf0	admin	default
INSTANCE	i-00000002	ami-dovh7phn	10.0.0.2	10.0.0.2	running	mykey (admin, lrrr)	0		m1.tiny	2011-02-25 03:34:53	nova		

* Remote File needs to support a CWD
* sort out the 'nova' user everywhere
* watch all errors, see how to catch those

mysql -unova -pyMrQKDPDKf4Ta7aeimfR nova -e 'select * from services;'

image="ttylinux-uec-amd64-12.1_2.6.35-22_1.tar.gz"
wget http://smoser.brickies.net/ubuntu/ttylinux-uec/$image
uec-publish-tarball $image mybucket

image="ubuntu1010-UEC-localuser-image.tar.gz"
wget http://c0179148.cdn1.cloudfiles.rackspacecloud.com/ubuntu1010-UEC-localuser-image.tar.gz
uec-publish-tarball $image <bucket-name> <hardware-arch>
uec-publish-tarball ubuntu1010-UEC-localuser-image.tar.gz dub-bucket x86_64

* figure out what grants.sql issue is
  stupid mysql
* make repo configurable via attribute for use with Crowbar
  can we ignore failures?
* make nova network an attribute
* mysql ruby-dev dependency run_time is bogus
  what about the mysql patch?
* license and author questions?
** mention it to vish and slap some Apache in there
** followup with Adam
* Cookbooks need to be versioned
* when do we depend on the apt cookbook in metadata.rb vs. include in recipe vs. include in run_list?
  metadata has to list includes
* remove
  chef-solo.rb
  dna.json
  install-swift.sh
  swift-template.json
  nova/recipes/all.rb
  nova/recipes/source.rb
* Deployment Scenarios
** nova-single-machine-install
   http://wiki.openstack.org/NovaInstall/DevPkgInstall
   sudo apt-get install nova-common nova-doc nova-api nova-network nova-objectstore nova-scheduler nova-compute euca2ools unzip

   get a AMI on there
   pick up on the Create Certifications
   pick up with the setup instructions for enabling the VM

** 2 machine setup
** cloud controller
   Installing the Cloud Controller
   
** compute node
   Install all the nova- packages and dependencies as you did for the Cloud Controller node. On this node, you must have nova-network installed and configured.
** finish both

   On both nodes, restart all six services in total, just to cover the entire spectrum:

   libvirtd restart; restart nova-network; restart nova-compute; 
   restart nova-api; restart nova-objectstore; restart nova-scheduler

** additional database servers

** additional RabbitMQ servers
   An alternative architecture would be to add more messaging servers if you notice a lot of back up in the messaging queue causing performance problems. 
   In that case you would add an additional RabbitMQ server in addition to or instead of scaling up the database server. 

* ROLES
* what's with all these roles?
**   Create roles to scale out controller infrastructure
**   Support: Queue, Database, LDAP
**   Interfaces: API controllers
**   Workers: Compute, Storage, Networking
* Add monitoring
* Compute (Nova)
** Hardware
   x86 Server (HW virtualization recommmended) Storage flexible (Local, SAN, NAS)
   DHCP for managing network managed by Compute
** Host OS Installation
   Bootp/TFTP
   GPXE
   Scripted installation 
** Links
   http://ansolabs.com/articles/multi-node-nova-installation-using-vagrant-and-chef
   https://github.com/ansolabs/openstack-cookbooks
   https://github.com/vvuksan/nova-solo
   https://fnords.wordpress.com/2010/12/02/bleeding-edge-openstack-nova-on-maverick/
   http://blog.warma.dk/2010/10/11/openstack-nova-in-maverick/
   http://wiki.openstack.org/NovaInstall/MultipleServer
** Cloud Controller
   State of the system, talks to LDAP, Object Storage and node/storage workers through Queue
** User Manager
** API
   Receives HTTP requests, sends them to Cloud Controller
** Hypervisor
   Xen/XenServer/Hyper-V/KVM/UML/ESX (LXC coming)
   
  add a nova-manage LWRP?
** attributes
   any to clean up?
   doc in README.md
** files
   are these all used and necessary? 
   doc as needed
*** base.ldif
*** default-rsync
*** iscsidev.sh*
*** nova.schema
*** openssh-lpk_openldap.schema
** templates
   are these all used and necessary? 
   doc as needed
*** grants.sql.erb
*** hostname.erb
*** ldap.conf.erb
*** nova.conf.erb
    nova::common
*** slapd.conf.erb
*** sv-nova-api-log-run.erb
*** sv-nova-api-run.erb
*** sv-nova-compute-log-run.erb
*** sv-nova-compute-run.erb
*** sv-nova-objectstore-log-run.erb
*** sv-nova-objectstore-run.erb
*** sysctl.conf.erb
** nova::all
   don't see this in a role
** nova::api
** nova::common
   includes apt
   nova-common via apt
   /etc/nova directory
   mysql connection
   rabbit connection
   /etc/nova/nova.conf
**** switch to an apt repository instead of PPA
** nova::compute
** nova::creds
** nova::dashboard
** nova::default
   nova::all
   nova::setup
** nova::filevg
** nova::hostname
** nova::mysql
** nova::network
** nova::objectstore
** nova::openldap
** nova::rabbit
** nova::scheduler
** nova::setup
   installs eucatools, curl
   replace curl calls with remote file resource?
   curl http://images.ansolabs.com/maverick.tgz | tar xvz -C /tmp/images
   curl http://images.ansolabs.com/tty.tgz | tar xvz -C images
   replace "touch" with touch resource
** nova::source
** nova::volume
   


* Object Storage (Swift)
** x86 Server (other archs possible) Do not use RAID
** Links
   https://github.com/cloudscaling/swift-solo
   https://github.com/ansolabs/openstack-cookbooks
** Ring
   Maps names to entities (accounts, containers, objects) on disk.
   Stores data based on zones, devices, partitions, and replicas
   Weights can be used to balance the distribution of partitions
   Used by the ProxyServer for many background processes
** Proxy Server
   Request routing, exposes the API
** Replication
   Keep the system consistent, handle failures
** Updaters
   Process failed or queued updates
** Auditors
   Verify integrity of objects,containers and accounts
** Account Server
   Handles listing of containers,stores as SQLiteDB
** Container Server
   Handles listing of objects, stores as SQLiteDB
** ObjectServer
   Blob storage server,metadata kept in xattrs, data in binary format
   Recommended to run on XFS Object location based on hash of name & timestamp







   Automated provisioning
   DHCP bootstrap

   banquet

   admin
   dhcp
   DNS
   DHCP
   NTP

   network boot clients
   RH->Chef Server

   notifcations like Puppet's external classification


   behind the firewall is definitely important

   separate session for hands-on launch

   some logic necessary when handing out 


*** need to extend Chef Server UI 

* Glance
   HTTP + Object Storage for server images

* Dashboard?
  https://launchpad.net/openstack-dashboard
* the deployment goal is to look at how many servers are available, then assign roles accordingly
  start with hard-coded
  eventually adaptive
  
